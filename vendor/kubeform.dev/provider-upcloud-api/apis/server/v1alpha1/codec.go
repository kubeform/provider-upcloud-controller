/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecLogin{}).Type1()):              ServerSpecLoginCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecSimpleBackup{}).Type1()):       ServerSpecSimpleBackupCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecTemplate{}).Type1()):           ServerSpecTemplateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecTemplateBackupRule{}).Type1()): ServerSpecTemplateBackupRuleCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecLogin{}).Type1()):              ServerSpecLoginCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecSimpleBackup{}).Type1()):       ServerSpecSimpleBackupCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecTemplate{}).Type1()):           ServerSpecTemplateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecTemplateBackupRule{}).Type1()): ServerSpecTemplateBackupRuleCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type ServerSpecLoginCodec struct {
}

func (ServerSpecLoginCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServerSpecLogin)(ptr) == nil
}

func (ServerSpecLoginCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServerSpecLogin)(ptr)
	var objs []ServerSpecLogin
	if obj != nil {
		objs = []ServerSpecLogin{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecLogin{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServerSpecLoginCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServerSpecLogin)(ptr) = ServerSpecLogin{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServerSpecLogin

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecLogin{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServerSpecLogin)(ptr) = objs[0]
			} else {
				*(*ServerSpecLogin)(ptr) = ServerSpecLogin{}
			}
		} else {
			*(*ServerSpecLogin)(ptr) = ServerSpecLogin{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServerSpecLogin

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecLogin{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServerSpecLogin)(ptr) = obj
		} else {
			*(*ServerSpecLogin)(ptr) = ServerSpecLogin{}
		}
	default:
		iter.ReportError("decode ServerSpecLogin", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServerSpecSimpleBackupCodec struct {
}

func (ServerSpecSimpleBackupCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServerSpecSimpleBackup)(ptr) == nil
}

func (ServerSpecSimpleBackupCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServerSpecSimpleBackup)(ptr)
	var objs []ServerSpecSimpleBackup
	if obj != nil {
		objs = []ServerSpecSimpleBackup{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecSimpleBackup{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServerSpecSimpleBackupCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServerSpecSimpleBackup)(ptr) = ServerSpecSimpleBackup{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServerSpecSimpleBackup

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecSimpleBackup{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServerSpecSimpleBackup)(ptr) = objs[0]
			} else {
				*(*ServerSpecSimpleBackup)(ptr) = ServerSpecSimpleBackup{}
			}
		} else {
			*(*ServerSpecSimpleBackup)(ptr) = ServerSpecSimpleBackup{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServerSpecSimpleBackup

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecSimpleBackup{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServerSpecSimpleBackup)(ptr) = obj
		} else {
			*(*ServerSpecSimpleBackup)(ptr) = ServerSpecSimpleBackup{}
		}
	default:
		iter.ReportError("decode ServerSpecSimpleBackup", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServerSpecTemplateCodec struct {
}

func (ServerSpecTemplateCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServerSpecTemplate)(ptr) == nil
}

func (ServerSpecTemplateCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServerSpecTemplate)(ptr)
	var objs []ServerSpecTemplate
	if obj != nil {
		objs = []ServerSpecTemplate{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecTemplate{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServerSpecTemplateCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServerSpecTemplate)(ptr) = ServerSpecTemplate{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServerSpecTemplate

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecTemplate{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServerSpecTemplate)(ptr) = objs[0]
			} else {
				*(*ServerSpecTemplate)(ptr) = ServerSpecTemplate{}
			}
		} else {
			*(*ServerSpecTemplate)(ptr) = ServerSpecTemplate{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServerSpecTemplate

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecTemplate{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServerSpecTemplate)(ptr) = obj
		} else {
			*(*ServerSpecTemplate)(ptr) = ServerSpecTemplate{}
		}
	default:
		iter.ReportError("decode ServerSpecTemplate", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServerSpecTemplateBackupRuleCodec struct {
}

func (ServerSpecTemplateBackupRuleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServerSpecTemplateBackupRule)(ptr) == nil
}

func (ServerSpecTemplateBackupRuleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServerSpecTemplateBackupRule)(ptr)
	var objs []ServerSpecTemplateBackupRule
	if obj != nil {
		objs = []ServerSpecTemplateBackupRule{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecTemplateBackupRule{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServerSpecTemplateBackupRuleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServerSpecTemplateBackupRule)(ptr) = ServerSpecTemplateBackupRule{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServerSpecTemplateBackupRule

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecTemplateBackupRule{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServerSpecTemplateBackupRule)(ptr) = objs[0]
			} else {
				*(*ServerSpecTemplateBackupRule)(ptr) = ServerSpecTemplateBackupRule{}
			}
		} else {
			*(*ServerSpecTemplateBackupRule)(ptr) = ServerSpecTemplateBackupRule{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServerSpecTemplateBackupRule

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecTemplateBackupRule{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServerSpecTemplateBackupRule)(ptr) = obj
		} else {
			*(*ServerSpecTemplateBackupRule)(ptr) = ServerSpecTemplateBackupRule{}
		}
	default:
		iter.ReportError("decode ServerSpecTemplateBackupRule", "unexpected JSON type")
	}
}
