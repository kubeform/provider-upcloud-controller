/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Network struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkSpec   `json:"spec,omitempty"`
	Status            NetworkStatus `json:"status,omitempty"`
}

type NetworkSpecIpNetwork struct {
	// The CIDR range of the subnet
	Address *string `json:"address" tf:"address"`
	// Is DHCP enabled?
	Dhcp *bool `json:"dhcp" tf:"dhcp"`
	// Is the gateway the DHCP default route?
	// +optional
	DhcpDefaultRoute *bool `json:"dhcpDefaultRoute,omitempty" tf:"dhcp_default_route"`
	// The DNS servers given by DHCP
	// +optional
	DhcpDNS []string `json:"dhcpDNS,omitempty" tf:"dhcp_dns"`
	// IP address family
	Family *string `json:"family" tf:"family"`
	// Gateway address given by DHCP
	// +optional
	Gateway *string `json:"gateway,omitempty" tf:"gateway"`
}

type NetworkSpecServers struct {
	// The UUID of the server
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// The short description of the server
	// +optional
	Title *string `json:"title,omitempty" tf:"title"`
}

type NetworkSpec struct {
	State *NetworkSpecResource `json:"state,omitempty" tf:"-"`

	Resource NetworkSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type NetworkSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// A list of IP subnets within the network
	IpNetwork *NetworkSpecIpNetwork `json:"ipNetwork" tf:"ip_network"`
	// A valid name for the network
	Name *string `json:"name" tf:"name"`
	// The UUID of a router
	// +optional
	Router *string `json:"router,omitempty" tf:"router"`
	// A list of attached servers
	// +optional
	Servers []NetworkSpecServers `json:"servers,omitempty" tf:"servers"`
	// The network type
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
	// The zone the network is in
	Zone *string `json:"zone" tf:"zone"`
}

type NetworkStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// NetworkList is a list of Networks
type NetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Network CRD objects
	Items []Network `json:"items,omitempty"`
}
