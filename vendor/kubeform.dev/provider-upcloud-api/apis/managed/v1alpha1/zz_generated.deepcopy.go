//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by deepcopy-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	apiv1 "kmodules.xyz/client-go/api/v1"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseLogicalDatabase) DeepCopyInto(out *DatabaseLogicalDatabase) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseLogicalDatabase.
func (in *DatabaseLogicalDatabase) DeepCopy() *DatabaseLogicalDatabase {
	if in == nil {
		return nil
	}
	out := new(DatabaseLogicalDatabase)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseLogicalDatabase) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseLogicalDatabaseList) DeepCopyInto(out *DatabaseLogicalDatabaseList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DatabaseLogicalDatabase, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseLogicalDatabaseList.
func (in *DatabaseLogicalDatabaseList) DeepCopy() *DatabaseLogicalDatabaseList {
	if in == nil {
		return nil
	}
	out := new(DatabaseLogicalDatabaseList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseLogicalDatabaseList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseLogicalDatabaseSpec) DeepCopyInto(out *DatabaseLogicalDatabaseSpec) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(DatabaseLogicalDatabaseSpecResource)
		(*in).DeepCopyInto(*out)
	}
	in.Resource.DeepCopyInto(&out.Resource)
	out.ProviderRef = in.ProviderRef
	if in.BackendRef != nil {
		in, out := &in.BackendRef, &out.BackendRef
		*out = new(v1.LocalObjectReference)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseLogicalDatabaseSpec.
func (in *DatabaseLogicalDatabaseSpec) DeepCopy() *DatabaseLogicalDatabaseSpec {
	if in == nil {
		return nil
	}
	out := new(DatabaseLogicalDatabaseSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseLogicalDatabaseSpecResource) DeepCopyInto(out *DatabaseLogicalDatabaseSpecResource) {
	*out = *in
	if in.CharacterSet != nil {
		in, out := &in.CharacterSet, &out.CharacterSet
		*out = new(string)
		**out = **in
	}
	if in.Collation != nil {
		in, out := &in.Collation, &out.Collation
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Service != nil {
		in, out := &in.Service, &out.Service
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseLogicalDatabaseSpecResource.
func (in *DatabaseLogicalDatabaseSpecResource) DeepCopy() *DatabaseLogicalDatabaseSpecResource {
	if in == nil {
		return nil
	}
	out := new(DatabaseLogicalDatabaseSpecResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseLogicalDatabaseStatus) DeepCopyInto(out *DatabaseLogicalDatabaseStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]apiv1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseLogicalDatabaseStatus.
func (in *DatabaseLogicalDatabaseStatus) DeepCopy() *DatabaseLogicalDatabaseStatus {
	if in == nil {
		return nil
	}
	out := new(DatabaseLogicalDatabaseStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseMysql) DeepCopyInto(out *DatabaseMysql) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseMysql.
func (in *DatabaseMysql) DeepCopy() *DatabaseMysql {
	if in == nil {
		return nil
	}
	out := new(DatabaseMysql)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseMysql) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseMysqlList) DeepCopyInto(out *DatabaseMysqlList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DatabaseMysql, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseMysqlList.
func (in *DatabaseMysqlList) DeepCopy() *DatabaseMysqlList {
	if in == nil {
		return nil
	}
	out := new(DatabaseMysqlList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseMysqlList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseMysqlSpec) DeepCopyInto(out *DatabaseMysqlSpec) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(DatabaseMysqlSpecResource)
		(*in).DeepCopyInto(*out)
	}
	in.Resource.DeepCopyInto(&out.Resource)
	out.ProviderRef = in.ProviderRef
	if in.SecretRef != nil {
		in, out := &in.SecretRef, &out.SecretRef
		*out = new(v1.LocalObjectReference)
		**out = **in
	}
	if in.BackendRef != nil {
		in, out := &in.BackendRef, &out.BackendRef
		*out = new(v1.LocalObjectReference)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseMysqlSpec.
func (in *DatabaseMysqlSpec) DeepCopy() *DatabaseMysqlSpec {
	if in == nil {
		return nil
	}
	out := new(DatabaseMysqlSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseMysqlSpecComponents) DeepCopyInto(out *DatabaseMysqlSpecComponents) {
	*out = *in
	if in.Component != nil {
		in, out := &in.Component, &out.Component
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int64)
		**out = **in
	}
	if in.Route != nil {
		in, out := &in.Route, &out.Route
		*out = new(string)
		**out = **in
	}
	if in.Usage != nil {
		in, out := &in.Usage, &out.Usage
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseMysqlSpecComponents.
func (in *DatabaseMysqlSpecComponents) DeepCopy() *DatabaseMysqlSpecComponents {
	if in == nil {
		return nil
	}
	out := new(DatabaseMysqlSpecComponents)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseMysqlSpecNodeStates) DeepCopyInto(out *DatabaseMysqlSpecNodeStates) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseMysqlSpecNodeStates.
func (in *DatabaseMysqlSpecNodeStates) DeepCopy() *DatabaseMysqlSpecNodeStates {
	if in == nil {
		return nil
	}
	out := new(DatabaseMysqlSpecNodeStates)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseMysqlSpecProperties) DeepCopyInto(out *DatabaseMysqlSpecProperties) {
	*out = *in
	if in.AdminPassword != nil {
		in, out := &in.AdminPassword, &out.AdminPassword
		*out = new(string)
		**out = **in
	}
	if in.AdminUsername != nil {
		in, out := &in.AdminUsername, &out.AdminUsername
		*out = new(string)
		**out = **in
	}
	if in.AutomaticUtilityNetworkIPFilter != nil {
		in, out := &in.AutomaticUtilityNetworkIPFilter, &out.AutomaticUtilityNetworkIPFilter
		*out = new(bool)
		**out = **in
	}
	if in.BackupHour != nil {
		in, out := &in.BackupHour, &out.BackupHour
		*out = new(int64)
		**out = **in
	}
	if in.BackupMinute != nil {
		in, out := &in.BackupMinute, &out.BackupMinute
		*out = new(int64)
		**out = **in
	}
	if in.BinlogRetentionPeriod != nil {
		in, out := &in.BinlogRetentionPeriod, &out.BinlogRetentionPeriod
		*out = new(int64)
		**out = **in
	}
	if in.ConnectTimeout != nil {
		in, out := &in.ConnectTimeout, &out.ConnectTimeout
		*out = new(int64)
		**out = **in
	}
	if in.DefaultTimeZone != nil {
		in, out := &in.DefaultTimeZone, &out.DefaultTimeZone
		*out = new(string)
		**out = **in
	}
	if in.GroupConcatMaxLen != nil {
		in, out := &in.GroupConcatMaxLen, &out.GroupConcatMaxLen
		*out = new(int64)
		**out = **in
	}
	if in.InformationSchemaStatsExpiry != nil {
		in, out := &in.InformationSchemaStatsExpiry, &out.InformationSchemaStatsExpiry
		*out = new(int64)
		**out = **in
	}
	if in.InnodbFtMinTokenSize != nil {
		in, out := &in.InnodbFtMinTokenSize, &out.InnodbFtMinTokenSize
		*out = new(int64)
		**out = **in
	}
	if in.InnodbFtServerStopwordTable != nil {
		in, out := &in.InnodbFtServerStopwordTable, &out.InnodbFtServerStopwordTable
		*out = new(string)
		**out = **in
	}
	if in.InnodbLockWaitTimeout != nil {
		in, out := &in.InnodbLockWaitTimeout, &out.InnodbLockWaitTimeout
		*out = new(int64)
		**out = **in
	}
	if in.InnodbLogBufferSize != nil {
		in, out := &in.InnodbLogBufferSize, &out.InnodbLogBufferSize
		*out = new(int64)
		**out = **in
	}
	if in.InnodbOnlineAlterLogMaxSize != nil {
		in, out := &in.InnodbOnlineAlterLogMaxSize, &out.InnodbOnlineAlterLogMaxSize
		*out = new(int64)
		**out = **in
	}
	if in.InnodbPrintAllDeadlocks != nil {
		in, out := &in.InnodbPrintAllDeadlocks, &out.InnodbPrintAllDeadlocks
		*out = new(bool)
		**out = **in
	}
	if in.InnodbRollbackOnTimeout != nil {
		in, out := &in.InnodbRollbackOnTimeout, &out.InnodbRollbackOnTimeout
		*out = new(bool)
		**out = **in
	}
	if in.InteractiveTimeout != nil {
		in, out := &in.InteractiveTimeout, &out.InteractiveTimeout
		*out = new(int64)
		**out = **in
	}
	if in.InternalTmpMemStorageEngine != nil {
		in, out := &in.InternalTmpMemStorageEngine, &out.InternalTmpMemStorageEngine
		*out = new(string)
		**out = **in
	}
	if in.IpFilter != nil {
		in, out := &in.IpFilter, &out.IpFilter
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.LongQueryTime != nil {
		in, out := &in.LongQueryTime, &out.LongQueryTime
		*out = new(float64)
		**out = **in
	}
	if in.MaxAllowedPacket != nil {
		in, out := &in.MaxAllowedPacket, &out.MaxAllowedPacket
		*out = new(int64)
		**out = **in
	}
	if in.MaxHeapTableSize != nil {
		in, out := &in.MaxHeapTableSize, &out.MaxHeapTableSize
		*out = new(int64)
		**out = **in
	}
	if in.Migration != nil {
		in, out := &in.Migration, &out.Migration
		*out = new(DatabaseMysqlSpecPropertiesMigration)
		(*in).DeepCopyInto(*out)
	}
	if in.NetReadTimeout != nil {
		in, out := &in.NetReadTimeout, &out.NetReadTimeout
		*out = new(int64)
		**out = **in
	}
	if in.NetWriteTimeout != nil {
		in, out := &in.NetWriteTimeout, &out.NetWriteTimeout
		*out = new(int64)
		**out = **in
	}
	if in.PublicAccess != nil {
		in, out := &in.PublicAccess, &out.PublicAccess
		*out = new(bool)
		**out = **in
	}
	if in.SlowQueryLog != nil {
		in, out := &in.SlowQueryLog, &out.SlowQueryLog
		*out = new(bool)
		**out = **in
	}
	if in.SortBufferSize != nil {
		in, out := &in.SortBufferSize, &out.SortBufferSize
		*out = new(int64)
		**out = **in
	}
	if in.SqlMode != nil {
		in, out := &in.SqlMode, &out.SqlMode
		*out = new(string)
		**out = **in
	}
	if in.SqlRequirePrimaryKey != nil {
		in, out := &in.SqlRequirePrimaryKey, &out.SqlRequirePrimaryKey
		*out = new(bool)
		**out = **in
	}
	if in.TmpTableSize != nil {
		in, out := &in.TmpTableSize, &out.TmpTableSize
		*out = new(int64)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.WaitTimeout != nil {
		in, out := &in.WaitTimeout, &out.WaitTimeout
		*out = new(int64)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseMysqlSpecProperties.
func (in *DatabaseMysqlSpecProperties) DeepCopy() *DatabaseMysqlSpecProperties {
	if in == nil {
		return nil
	}
	out := new(DatabaseMysqlSpecProperties)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseMysqlSpecPropertiesMigration) DeepCopyInto(out *DatabaseMysqlSpecPropertiesMigration) {
	*out = *in
	if in.Dbname != nil {
		in, out := &in.Dbname, &out.Dbname
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.IgnoreDbs != nil {
		in, out := &in.IgnoreDbs, &out.IgnoreDbs
		*out = new(string)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int64)
		**out = **in
	}
	if in.Ssl != nil {
		in, out := &in.Ssl, &out.Ssl
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseMysqlSpecPropertiesMigration.
func (in *DatabaseMysqlSpecPropertiesMigration) DeepCopy() *DatabaseMysqlSpecPropertiesMigration {
	if in == nil {
		return nil
	}
	out := new(DatabaseMysqlSpecPropertiesMigration)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseMysqlSpecResource) DeepCopyInto(out *DatabaseMysqlSpecResource) {
	*out = *in
	if in.Components != nil {
		in, out := &in.Components, &out.Components
		*out = make([]DatabaseMysqlSpecComponents, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MaintenanceWindowDow != nil {
		in, out := &in.MaintenanceWindowDow, &out.MaintenanceWindowDow
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindowTime != nil {
		in, out := &in.MaintenanceWindowTime, &out.MaintenanceWindowTime
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NodeStates != nil {
		in, out := &in.NodeStates, &out.NodeStates
		*out = make([]DatabaseMysqlSpecNodeStates, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Plan != nil {
		in, out := &in.Plan, &out.Plan
		*out = new(string)
		**out = **in
	}
	if in.Powered != nil {
		in, out := &in.Powered, &out.Powered
		*out = new(bool)
		**out = **in
	}
	if in.PrimaryDatabase != nil {
		in, out := &in.PrimaryDatabase, &out.PrimaryDatabase
		*out = new(string)
		**out = **in
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = new(DatabaseMysqlSpecProperties)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceHost != nil {
		in, out := &in.ServiceHost, &out.ServiceHost
		*out = new(string)
		**out = **in
	}
	if in.ServicePassword != nil {
		in, out := &in.ServicePassword, &out.ServicePassword
		*out = new(string)
		**out = **in
	}
	if in.ServicePort != nil {
		in, out := &in.ServicePort, &out.ServicePort
		*out = new(string)
		**out = **in
	}
	if in.ServiceURI != nil {
		in, out := &in.ServiceURI, &out.ServiceURI
		*out = new(string)
		**out = **in
	}
	if in.ServiceUsername != nil {
		in, out := &in.ServiceUsername, &out.ServiceUsername
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseMysqlSpecResource.
func (in *DatabaseMysqlSpecResource) DeepCopy() *DatabaseMysqlSpecResource {
	if in == nil {
		return nil
	}
	out := new(DatabaseMysqlSpecResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseMysqlStatus) DeepCopyInto(out *DatabaseMysqlStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]apiv1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseMysqlStatus.
func (in *DatabaseMysqlStatus) DeepCopy() *DatabaseMysqlStatus {
	if in == nil {
		return nil
	}
	out := new(DatabaseMysqlStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabasePostgresql) DeepCopyInto(out *DatabasePostgresql) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabasePostgresql.
func (in *DatabasePostgresql) DeepCopy() *DatabasePostgresql {
	if in == nil {
		return nil
	}
	out := new(DatabasePostgresql)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabasePostgresql) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabasePostgresqlList) DeepCopyInto(out *DatabasePostgresqlList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DatabasePostgresql, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabasePostgresqlList.
func (in *DatabasePostgresqlList) DeepCopy() *DatabasePostgresqlList {
	if in == nil {
		return nil
	}
	out := new(DatabasePostgresqlList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabasePostgresqlList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabasePostgresqlSpec) DeepCopyInto(out *DatabasePostgresqlSpec) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(DatabasePostgresqlSpecResource)
		(*in).DeepCopyInto(*out)
	}
	in.Resource.DeepCopyInto(&out.Resource)
	out.ProviderRef = in.ProviderRef
	if in.SecretRef != nil {
		in, out := &in.SecretRef, &out.SecretRef
		*out = new(v1.LocalObjectReference)
		**out = **in
	}
	if in.BackendRef != nil {
		in, out := &in.BackendRef, &out.BackendRef
		*out = new(v1.LocalObjectReference)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabasePostgresqlSpec.
func (in *DatabasePostgresqlSpec) DeepCopy() *DatabasePostgresqlSpec {
	if in == nil {
		return nil
	}
	out := new(DatabasePostgresqlSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabasePostgresqlSpecComponents) DeepCopyInto(out *DatabasePostgresqlSpecComponents) {
	*out = *in
	if in.Component != nil {
		in, out := &in.Component, &out.Component
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int64)
		**out = **in
	}
	if in.Route != nil {
		in, out := &in.Route, &out.Route
		*out = new(string)
		**out = **in
	}
	if in.Usage != nil {
		in, out := &in.Usage, &out.Usage
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabasePostgresqlSpecComponents.
func (in *DatabasePostgresqlSpecComponents) DeepCopy() *DatabasePostgresqlSpecComponents {
	if in == nil {
		return nil
	}
	out := new(DatabasePostgresqlSpecComponents)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabasePostgresqlSpecNodeStates) DeepCopyInto(out *DatabasePostgresqlSpecNodeStates) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabasePostgresqlSpecNodeStates.
func (in *DatabasePostgresqlSpecNodeStates) DeepCopy() *DatabasePostgresqlSpecNodeStates {
	if in == nil {
		return nil
	}
	out := new(DatabasePostgresqlSpecNodeStates)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabasePostgresqlSpecProperties) DeepCopyInto(out *DatabasePostgresqlSpecProperties) {
	*out = *in
	if in.AdminPassword != nil {
		in, out := &in.AdminPassword, &out.AdminPassword
		*out = new(string)
		**out = **in
	}
	if in.AdminUsername != nil {
		in, out := &in.AdminUsername, &out.AdminUsername
		*out = new(string)
		**out = **in
	}
	if in.AutomaticUtilityNetworkIPFilter != nil {
		in, out := &in.AutomaticUtilityNetworkIPFilter, &out.AutomaticUtilityNetworkIPFilter
		*out = new(bool)
		**out = **in
	}
	if in.AutovacuumAnalyzeScaleFactor != nil {
		in, out := &in.AutovacuumAnalyzeScaleFactor, &out.AutovacuumAnalyzeScaleFactor
		*out = new(float64)
		**out = **in
	}
	if in.AutovacuumAnalyzeThreshold != nil {
		in, out := &in.AutovacuumAnalyzeThreshold, &out.AutovacuumAnalyzeThreshold
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumFreezeMaxAge != nil {
		in, out := &in.AutovacuumFreezeMaxAge, &out.AutovacuumFreezeMaxAge
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumMaxWorkers != nil {
		in, out := &in.AutovacuumMaxWorkers, &out.AutovacuumMaxWorkers
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumNaptime != nil {
		in, out := &in.AutovacuumNaptime, &out.AutovacuumNaptime
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumVacuumCostDelay != nil {
		in, out := &in.AutovacuumVacuumCostDelay, &out.AutovacuumVacuumCostDelay
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumVacuumCostLimit != nil {
		in, out := &in.AutovacuumVacuumCostLimit, &out.AutovacuumVacuumCostLimit
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumVacuumScaleFactor != nil {
		in, out := &in.AutovacuumVacuumScaleFactor, &out.AutovacuumVacuumScaleFactor
		*out = new(float64)
		**out = **in
	}
	if in.AutovacuumVacuumThreshold != nil {
		in, out := &in.AutovacuumVacuumThreshold, &out.AutovacuumVacuumThreshold
		*out = new(int64)
		**out = **in
	}
	if in.BackupHour != nil {
		in, out := &in.BackupHour, &out.BackupHour
		*out = new(int64)
		**out = **in
	}
	if in.BackupMinute != nil {
		in, out := &in.BackupMinute, &out.BackupMinute
		*out = new(int64)
		**out = **in
	}
	if in.BgwriterDelay != nil {
		in, out := &in.BgwriterDelay, &out.BgwriterDelay
		*out = new(int64)
		**out = **in
	}
	if in.BgwriterFlushAfter != nil {
		in, out := &in.BgwriterFlushAfter, &out.BgwriterFlushAfter
		*out = new(int64)
		**out = **in
	}
	if in.BgwriterLruMaxpages != nil {
		in, out := &in.BgwriterLruMaxpages, &out.BgwriterLruMaxpages
		*out = new(int64)
		**out = **in
	}
	if in.BgwriterLruMultiplier != nil {
		in, out := &in.BgwriterLruMultiplier, &out.BgwriterLruMultiplier
		*out = new(float64)
		**out = **in
	}
	if in.DeadlockTimeout != nil {
		in, out := &in.DeadlockTimeout, &out.DeadlockTimeout
		*out = new(int64)
		**out = **in
	}
	if in.IdleInTransactionSessionTimeout != nil {
		in, out := &in.IdleInTransactionSessionTimeout, &out.IdleInTransactionSessionTimeout
		*out = new(int64)
		**out = **in
	}
	if in.IpFilter != nil {
		in, out := &in.IpFilter, &out.IpFilter
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Jit != nil {
		in, out := &in.Jit, &out.Jit
		*out = new(bool)
		**out = **in
	}
	if in.LogAutovacuumMinDuration != nil {
		in, out := &in.LogAutovacuumMinDuration, &out.LogAutovacuumMinDuration
		*out = new(int64)
		**out = **in
	}
	if in.LogErrorVerbosity != nil {
		in, out := &in.LogErrorVerbosity, &out.LogErrorVerbosity
		*out = new(string)
		**out = **in
	}
	if in.LogLinePrefix != nil {
		in, out := &in.LogLinePrefix, &out.LogLinePrefix
		*out = new(string)
		**out = **in
	}
	if in.LogMinDurationStatement != nil {
		in, out := &in.LogMinDurationStatement, &out.LogMinDurationStatement
		*out = new(int64)
		**out = **in
	}
	if in.MaxFilesPerProcess != nil {
		in, out := &in.MaxFilesPerProcess, &out.MaxFilesPerProcess
		*out = new(int64)
		**out = **in
	}
	if in.MaxLocksPerTransaction != nil {
		in, out := &in.MaxLocksPerTransaction, &out.MaxLocksPerTransaction
		*out = new(int64)
		**out = **in
	}
	if in.MaxLogicalReplicationWorkers != nil {
		in, out := &in.MaxLogicalReplicationWorkers, &out.MaxLogicalReplicationWorkers
		*out = new(int64)
		**out = **in
	}
	if in.MaxParallelWorkers != nil {
		in, out := &in.MaxParallelWorkers, &out.MaxParallelWorkers
		*out = new(int64)
		**out = **in
	}
	if in.MaxParallelWorkersPerGather != nil {
		in, out := &in.MaxParallelWorkersPerGather, &out.MaxParallelWorkersPerGather
		*out = new(int64)
		**out = **in
	}
	if in.MaxPredLocksPerTransaction != nil {
		in, out := &in.MaxPredLocksPerTransaction, &out.MaxPredLocksPerTransaction
		*out = new(int64)
		**out = **in
	}
	if in.MaxPreparedTransactions != nil {
		in, out := &in.MaxPreparedTransactions, &out.MaxPreparedTransactions
		*out = new(int64)
		**out = **in
	}
	if in.MaxReplicationSlots != nil {
		in, out := &in.MaxReplicationSlots, &out.MaxReplicationSlots
		*out = new(int64)
		**out = **in
	}
	if in.MaxStackDepth != nil {
		in, out := &in.MaxStackDepth, &out.MaxStackDepth
		*out = new(int64)
		**out = **in
	}
	if in.MaxStandbyArchiveDelay != nil {
		in, out := &in.MaxStandbyArchiveDelay, &out.MaxStandbyArchiveDelay
		*out = new(int64)
		**out = **in
	}
	if in.MaxStandbyStreamingDelay != nil {
		in, out := &in.MaxStandbyStreamingDelay, &out.MaxStandbyStreamingDelay
		*out = new(int64)
		**out = **in
	}
	if in.MaxWalSenders != nil {
		in, out := &in.MaxWalSenders, &out.MaxWalSenders
		*out = new(int64)
		**out = **in
	}
	if in.MaxWorkerProcesses != nil {
		in, out := &in.MaxWorkerProcesses, &out.MaxWorkerProcesses
		*out = new(int64)
		**out = **in
	}
	if in.Migration != nil {
		in, out := &in.Migration, &out.Migration
		*out = new(DatabasePostgresqlSpecPropertiesMigration)
		(*in).DeepCopyInto(*out)
	}
	if in.PgPartmanBgwInterval != nil {
		in, out := &in.PgPartmanBgwInterval, &out.PgPartmanBgwInterval
		*out = new(int64)
		**out = **in
	}
	if in.PgPartmanBgwRole != nil {
		in, out := &in.PgPartmanBgwRole, &out.PgPartmanBgwRole
		*out = new(string)
		**out = **in
	}
	if in.PgReadReplica != nil {
		in, out := &in.PgReadReplica, &out.PgReadReplica
		*out = new(bool)
		**out = **in
	}
	if in.PgServiceToForkFrom != nil {
		in, out := &in.PgServiceToForkFrom, &out.PgServiceToForkFrom
		*out = new(string)
		**out = **in
	}
	if in.PgStatStatementsTrack != nil {
		in, out := &in.PgStatStatementsTrack, &out.PgStatStatementsTrack
		*out = new(string)
		**out = **in
	}
	if in.Pgbouncer != nil {
		in, out := &in.Pgbouncer, &out.Pgbouncer
		*out = new(DatabasePostgresqlSpecPropertiesPgbouncer)
		(*in).DeepCopyInto(*out)
	}
	if in.Pglookout != nil {
		in, out := &in.Pglookout, &out.Pglookout
		*out = new(DatabasePostgresqlSpecPropertiesPglookout)
		(*in).DeepCopyInto(*out)
	}
	if in.PublicAccess != nil {
		in, out := &in.PublicAccess, &out.PublicAccess
		*out = new(bool)
		**out = **in
	}
	if in.SharedBuffersPercentage != nil {
		in, out := &in.SharedBuffersPercentage, &out.SharedBuffersPercentage
		*out = new(float64)
		**out = **in
	}
	if in.SynchronousReplication != nil {
		in, out := &in.SynchronousReplication, &out.SynchronousReplication
		*out = new(string)
		**out = **in
	}
	if in.TempFileLimit != nil {
		in, out := &in.TempFileLimit, &out.TempFileLimit
		*out = new(int64)
		**out = **in
	}
	if in.Timescaledb != nil {
		in, out := &in.Timescaledb, &out.Timescaledb
		*out = new(DatabasePostgresqlSpecPropertiesTimescaledb)
		(*in).DeepCopyInto(*out)
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.TrackActivityQuerySize != nil {
		in, out := &in.TrackActivityQuerySize, &out.TrackActivityQuerySize
		*out = new(int64)
		**out = **in
	}
	if in.TrackCommitTimestamp != nil {
		in, out := &in.TrackCommitTimestamp, &out.TrackCommitTimestamp
		*out = new(string)
		**out = **in
	}
	if in.TrackFunctions != nil {
		in, out := &in.TrackFunctions, &out.TrackFunctions
		*out = new(string)
		**out = **in
	}
	if in.TrackIoTiming != nil {
		in, out := &in.TrackIoTiming, &out.TrackIoTiming
		*out = new(string)
		**out = **in
	}
	if in.Variant != nil {
		in, out := &in.Variant, &out.Variant
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.WalSenderTimeout != nil {
		in, out := &in.WalSenderTimeout, &out.WalSenderTimeout
		*out = new(int64)
		**out = **in
	}
	if in.WalWriterDelay != nil {
		in, out := &in.WalWriterDelay, &out.WalWriterDelay
		*out = new(int64)
		**out = **in
	}
	if in.WorkMem != nil {
		in, out := &in.WorkMem, &out.WorkMem
		*out = new(int64)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabasePostgresqlSpecProperties.
func (in *DatabasePostgresqlSpecProperties) DeepCopy() *DatabasePostgresqlSpecProperties {
	if in == nil {
		return nil
	}
	out := new(DatabasePostgresqlSpecProperties)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabasePostgresqlSpecPropertiesMigration) DeepCopyInto(out *DatabasePostgresqlSpecPropertiesMigration) {
	*out = *in
	if in.Dbname != nil {
		in, out := &in.Dbname, &out.Dbname
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.IgnoreDbs != nil {
		in, out := &in.IgnoreDbs, &out.IgnoreDbs
		*out = new(string)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int64)
		**out = **in
	}
	if in.Ssl != nil {
		in, out := &in.Ssl, &out.Ssl
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabasePostgresqlSpecPropertiesMigration.
func (in *DatabasePostgresqlSpecPropertiesMigration) DeepCopy() *DatabasePostgresqlSpecPropertiesMigration {
	if in == nil {
		return nil
	}
	out := new(DatabasePostgresqlSpecPropertiesMigration)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabasePostgresqlSpecPropertiesPgbouncer) DeepCopyInto(out *DatabasePostgresqlSpecPropertiesPgbouncer) {
	*out = *in
	if in.AutodbIdleTimeout != nil {
		in, out := &in.AutodbIdleTimeout, &out.AutodbIdleTimeout
		*out = new(int64)
		**out = **in
	}
	if in.AutodbMaxDbConnections != nil {
		in, out := &in.AutodbMaxDbConnections, &out.AutodbMaxDbConnections
		*out = new(int64)
		**out = **in
	}
	if in.AutodbPoolMode != nil {
		in, out := &in.AutodbPoolMode, &out.AutodbPoolMode
		*out = new(string)
		**out = **in
	}
	if in.AutodbPoolSize != nil {
		in, out := &in.AutodbPoolSize, &out.AutodbPoolSize
		*out = new(int64)
		**out = **in
	}
	if in.IgnoreStartupParameters != nil {
		in, out := &in.IgnoreStartupParameters, &out.IgnoreStartupParameters
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.MinPoolSize != nil {
		in, out := &in.MinPoolSize, &out.MinPoolSize
		*out = new(int64)
		**out = **in
	}
	if in.ServerIdleTimeout != nil {
		in, out := &in.ServerIdleTimeout, &out.ServerIdleTimeout
		*out = new(int64)
		**out = **in
	}
	if in.ServerLifetime != nil {
		in, out := &in.ServerLifetime, &out.ServerLifetime
		*out = new(int64)
		**out = **in
	}
	if in.ServerResetQueryAlways != nil {
		in, out := &in.ServerResetQueryAlways, &out.ServerResetQueryAlways
		*out = new(bool)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabasePostgresqlSpecPropertiesPgbouncer.
func (in *DatabasePostgresqlSpecPropertiesPgbouncer) DeepCopy() *DatabasePostgresqlSpecPropertiesPgbouncer {
	if in == nil {
		return nil
	}
	out := new(DatabasePostgresqlSpecPropertiesPgbouncer)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabasePostgresqlSpecPropertiesPglookout) DeepCopyInto(out *DatabasePostgresqlSpecPropertiesPglookout) {
	*out = *in
	if in.MaxFailoverReplicationTimeLag != nil {
		in, out := &in.MaxFailoverReplicationTimeLag, &out.MaxFailoverReplicationTimeLag
		*out = new(int64)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabasePostgresqlSpecPropertiesPglookout.
func (in *DatabasePostgresqlSpecPropertiesPglookout) DeepCopy() *DatabasePostgresqlSpecPropertiesPglookout {
	if in == nil {
		return nil
	}
	out := new(DatabasePostgresqlSpecPropertiesPglookout)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabasePostgresqlSpecPropertiesTimescaledb) DeepCopyInto(out *DatabasePostgresqlSpecPropertiesTimescaledb) {
	*out = *in
	if in.MaxBackgroundWorkers != nil {
		in, out := &in.MaxBackgroundWorkers, &out.MaxBackgroundWorkers
		*out = new(int64)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabasePostgresqlSpecPropertiesTimescaledb.
func (in *DatabasePostgresqlSpecPropertiesTimescaledb) DeepCopy() *DatabasePostgresqlSpecPropertiesTimescaledb {
	if in == nil {
		return nil
	}
	out := new(DatabasePostgresqlSpecPropertiesTimescaledb)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabasePostgresqlSpecResource) DeepCopyInto(out *DatabasePostgresqlSpecResource) {
	*out = *in
	if in.Components != nil {
		in, out := &in.Components, &out.Components
		*out = make([]DatabasePostgresqlSpecComponents, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MaintenanceWindowDow != nil {
		in, out := &in.MaintenanceWindowDow, &out.MaintenanceWindowDow
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindowTime != nil {
		in, out := &in.MaintenanceWindowTime, &out.MaintenanceWindowTime
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NodeStates != nil {
		in, out := &in.NodeStates, &out.NodeStates
		*out = make([]DatabasePostgresqlSpecNodeStates, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Plan != nil {
		in, out := &in.Plan, &out.Plan
		*out = new(string)
		**out = **in
	}
	if in.Powered != nil {
		in, out := &in.Powered, &out.Powered
		*out = new(bool)
		**out = **in
	}
	if in.PrimaryDatabase != nil {
		in, out := &in.PrimaryDatabase, &out.PrimaryDatabase
		*out = new(string)
		**out = **in
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = new(DatabasePostgresqlSpecProperties)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceHost != nil {
		in, out := &in.ServiceHost, &out.ServiceHost
		*out = new(string)
		**out = **in
	}
	if in.ServicePassword != nil {
		in, out := &in.ServicePassword, &out.ServicePassword
		*out = new(string)
		**out = **in
	}
	if in.ServicePort != nil {
		in, out := &in.ServicePort, &out.ServicePort
		*out = new(string)
		**out = **in
	}
	if in.ServiceURI != nil {
		in, out := &in.ServiceURI, &out.ServiceURI
		*out = new(string)
		**out = **in
	}
	if in.ServiceUsername != nil {
		in, out := &in.ServiceUsername, &out.ServiceUsername
		*out = new(string)
		**out = **in
	}
	if in.Sslmode != nil {
		in, out := &in.Sslmode, &out.Sslmode
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabasePostgresqlSpecResource.
func (in *DatabasePostgresqlSpecResource) DeepCopy() *DatabasePostgresqlSpecResource {
	if in == nil {
		return nil
	}
	out := new(DatabasePostgresqlSpecResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabasePostgresqlStatus) DeepCopyInto(out *DatabasePostgresqlStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]apiv1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabasePostgresqlStatus.
func (in *DatabasePostgresqlStatus) DeepCopy() *DatabasePostgresqlStatus {
	if in == nil {
		return nil
	}
	out := new(DatabasePostgresqlStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseUser) DeepCopyInto(out *DatabaseUser) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseUser.
func (in *DatabaseUser) DeepCopy() *DatabaseUser {
	if in == nil {
		return nil
	}
	out := new(DatabaseUser)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseUser) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseUserList) DeepCopyInto(out *DatabaseUserList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DatabaseUser, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseUserList.
func (in *DatabaseUserList) DeepCopy() *DatabaseUserList {
	if in == nil {
		return nil
	}
	out := new(DatabaseUserList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseUserList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseUserSpec) DeepCopyInto(out *DatabaseUserSpec) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(DatabaseUserSpecResource)
		(*in).DeepCopyInto(*out)
	}
	in.Resource.DeepCopyInto(&out.Resource)
	out.ProviderRef = in.ProviderRef
	if in.SecretRef != nil {
		in, out := &in.SecretRef, &out.SecretRef
		*out = new(v1.LocalObjectReference)
		**out = **in
	}
	if in.BackendRef != nil {
		in, out := &in.BackendRef, &out.BackendRef
		*out = new(v1.LocalObjectReference)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseUserSpec.
func (in *DatabaseUserSpec) DeepCopy() *DatabaseUserSpec {
	if in == nil {
		return nil
	}
	out := new(DatabaseUserSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseUserSpecResource) DeepCopyInto(out *DatabaseUserSpecResource) {
	*out = *in
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.Service != nil {
		in, out := &in.Service, &out.Service
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseUserSpecResource.
func (in *DatabaseUserSpecResource) DeepCopy() *DatabaseUserSpecResource {
	if in == nil {
		return nil
	}
	out := new(DatabaseUserSpecResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseUserStatus) DeepCopyInto(out *DatabaseUserStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]apiv1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseUserStatus.
func (in *DatabaseUserStatus) DeepCopy() *DatabaseUserStatus {
	if in == nil {
		return nil
	}
	out := new(DatabaseUserStatus)
	in.DeepCopyInto(out)
	return out
}
