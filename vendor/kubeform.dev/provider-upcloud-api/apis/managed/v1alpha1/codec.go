/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseMysqlSpecProperties{}).Type1()):                 DatabaseMysqlSpecPropertiesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseMysqlSpecPropertiesMigration{}).Type1()):        DatabaseMysqlSpecPropertiesMigrationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecProperties{}).Type1()):            DatabasePostgresqlSpecPropertiesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecPropertiesMigration{}).Type1()):   DatabasePostgresqlSpecPropertiesMigrationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecPropertiesPgbouncer{}).Type1()):   DatabasePostgresqlSpecPropertiesPgbouncerCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecPropertiesPglookout{}).Type1()):   DatabasePostgresqlSpecPropertiesPglookoutCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecPropertiesTimescaledb{}).Type1()): DatabasePostgresqlSpecPropertiesTimescaledbCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseMysqlSpecProperties{}).Type1()):                 DatabaseMysqlSpecPropertiesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseMysqlSpecPropertiesMigration{}).Type1()):        DatabaseMysqlSpecPropertiesMigrationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecProperties{}).Type1()):            DatabasePostgresqlSpecPropertiesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecPropertiesMigration{}).Type1()):   DatabasePostgresqlSpecPropertiesMigrationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecPropertiesPgbouncer{}).Type1()):   DatabasePostgresqlSpecPropertiesPgbouncerCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecPropertiesPglookout{}).Type1()):   DatabasePostgresqlSpecPropertiesPglookoutCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecPropertiesTimescaledb{}).Type1()): DatabasePostgresqlSpecPropertiesTimescaledbCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type DatabaseMysqlSpecPropertiesCodec struct {
}

func (DatabaseMysqlSpecPropertiesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabaseMysqlSpecProperties)(ptr) == nil
}

func (DatabaseMysqlSpecPropertiesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabaseMysqlSpecProperties)(ptr)
	var objs []DatabaseMysqlSpecProperties
	if obj != nil {
		objs = []DatabaseMysqlSpecProperties{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseMysqlSpecProperties{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabaseMysqlSpecPropertiesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabaseMysqlSpecProperties)(ptr) = DatabaseMysqlSpecProperties{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabaseMysqlSpecProperties

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseMysqlSpecProperties{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabaseMysqlSpecProperties)(ptr) = objs[0]
			} else {
				*(*DatabaseMysqlSpecProperties)(ptr) = DatabaseMysqlSpecProperties{}
			}
		} else {
			*(*DatabaseMysqlSpecProperties)(ptr) = DatabaseMysqlSpecProperties{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DatabaseMysqlSpecProperties

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseMysqlSpecProperties{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DatabaseMysqlSpecProperties)(ptr) = obj
		} else {
			*(*DatabaseMysqlSpecProperties)(ptr) = DatabaseMysqlSpecProperties{}
		}
	default:
		iter.ReportError("decode DatabaseMysqlSpecProperties", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DatabaseMysqlSpecPropertiesMigrationCodec struct {
}

func (DatabaseMysqlSpecPropertiesMigrationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabaseMysqlSpecPropertiesMigration)(ptr) == nil
}

func (DatabaseMysqlSpecPropertiesMigrationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabaseMysqlSpecPropertiesMigration)(ptr)
	var objs []DatabaseMysqlSpecPropertiesMigration
	if obj != nil {
		objs = []DatabaseMysqlSpecPropertiesMigration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseMysqlSpecPropertiesMigration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabaseMysqlSpecPropertiesMigrationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabaseMysqlSpecPropertiesMigration)(ptr) = DatabaseMysqlSpecPropertiesMigration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabaseMysqlSpecPropertiesMigration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseMysqlSpecPropertiesMigration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabaseMysqlSpecPropertiesMigration)(ptr) = objs[0]
			} else {
				*(*DatabaseMysqlSpecPropertiesMigration)(ptr) = DatabaseMysqlSpecPropertiesMigration{}
			}
		} else {
			*(*DatabaseMysqlSpecPropertiesMigration)(ptr) = DatabaseMysqlSpecPropertiesMigration{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DatabaseMysqlSpecPropertiesMigration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseMysqlSpecPropertiesMigration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DatabaseMysqlSpecPropertiesMigration)(ptr) = obj
		} else {
			*(*DatabaseMysqlSpecPropertiesMigration)(ptr) = DatabaseMysqlSpecPropertiesMigration{}
		}
	default:
		iter.ReportError("decode DatabaseMysqlSpecPropertiesMigration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DatabasePostgresqlSpecPropertiesCodec struct {
}

func (DatabasePostgresqlSpecPropertiesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabasePostgresqlSpecProperties)(ptr) == nil
}

func (DatabasePostgresqlSpecPropertiesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabasePostgresqlSpecProperties)(ptr)
	var objs []DatabasePostgresqlSpecProperties
	if obj != nil {
		objs = []DatabasePostgresqlSpecProperties{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecProperties{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabasePostgresqlSpecPropertiesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabasePostgresqlSpecProperties)(ptr) = DatabasePostgresqlSpecProperties{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabasePostgresqlSpecProperties

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecProperties{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabasePostgresqlSpecProperties)(ptr) = objs[0]
			} else {
				*(*DatabasePostgresqlSpecProperties)(ptr) = DatabasePostgresqlSpecProperties{}
			}
		} else {
			*(*DatabasePostgresqlSpecProperties)(ptr) = DatabasePostgresqlSpecProperties{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DatabasePostgresqlSpecProperties

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecProperties{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DatabasePostgresqlSpecProperties)(ptr) = obj
		} else {
			*(*DatabasePostgresqlSpecProperties)(ptr) = DatabasePostgresqlSpecProperties{}
		}
	default:
		iter.ReportError("decode DatabasePostgresqlSpecProperties", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DatabasePostgresqlSpecPropertiesMigrationCodec struct {
}

func (DatabasePostgresqlSpecPropertiesMigrationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabasePostgresqlSpecPropertiesMigration)(ptr) == nil
}

func (DatabasePostgresqlSpecPropertiesMigrationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabasePostgresqlSpecPropertiesMigration)(ptr)
	var objs []DatabasePostgresqlSpecPropertiesMigration
	if obj != nil {
		objs = []DatabasePostgresqlSpecPropertiesMigration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecPropertiesMigration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabasePostgresqlSpecPropertiesMigrationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabasePostgresqlSpecPropertiesMigration)(ptr) = DatabasePostgresqlSpecPropertiesMigration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabasePostgresqlSpecPropertiesMigration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecPropertiesMigration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabasePostgresqlSpecPropertiesMigration)(ptr) = objs[0]
			} else {
				*(*DatabasePostgresqlSpecPropertiesMigration)(ptr) = DatabasePostgresqlSpecPropertiesMigration{}
			}
		} else {
			*(*DatabasePostgresqlSpecPropertiesMigration)(ptr) = DatabasePostgresqlSpecPropertiesMigration{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DatabasePostgresqlSpecPropertiesMigration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecPropertiesMigration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DatabasePostgresqlSpecPropertiesMigration)(ptr) = obj
		} else {
			*(*DatabasePostgresqlSpecPropertiesMigration)(ptr) = DatabasePostgresqlSpecPropertiesMigration{}
		}
	default:
		iter.ReportError("decode DatabasePostgresqlSpecPropertiesMigration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DatabasePostgresqlSpecPropertiesPgbouncerCodec struct {
}

func (DatabasePostgresqlSpecPropertiesPgbouncerCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabasePostgresqlSpecPropertiesPgbouncer)(ptr) == nil
}

func (DatabasePostgresqlSpecPropertiesPgbouncerCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabasePostgresqlSpecPropertiesPgbouncer)(ptr)
	var objs []DatabasePostgresqlSpecPropertiesPgbouncer
	if obj != nil {
		objs = []DatabasePostgresqlSpecPropertiesPgbouncer{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecPropertiesPgbouncer{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabasePostgresqlSpecPropertiesPgbouncerCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabasePostgresqlSpecPropertiesPgbouncer)(ptr) = DatabasePostgresqlSpecPropertiesPgbouncer{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabasePostgresqlSpecPropertiesPgbouncer

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecPropertiesPgbouncer{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabasePostgresqlSpecPropertiesPgbouncer)(ptr) = objs[0]
			} else {
				*(*DatabasePostgresqlSpecPropertiesPgbouncer)(ptr) = DatabasePostgresqlSpecPropertiesPgbouncer{}
			}
		} else {
			*(*DatabasePostgresqlSpecPropertiesPgbouncer)(ptr) = DatabasePostgresqlSpecPropertiesPgbouncer{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DatabasePostgresqlSpecPropertiesPgbouncer

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecPropertiesPgbouncer{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DatabasePostgresqlSpecPropertiesPgbouncer)(ptr) = obj
		} else {
			*(*DatabasePostgresqlSpecPropertiesPgbouncer)(ptr) = DatabasePostgresqlSpecPropertiesPgbouncer{}
		}
	default:
		iter.ReportError("decode DatabasePostgresqlSpecPropertiesPgbouncer", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DatabasePostgresqlSpecPropertiesPglookoutCodec struct {
}

func (DatabasePostgresqlSpecPropertiesPglookoutCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabasePostgresqlSpecPropertiesPglookout)(ptr) == nil
}

func (DatabasePostgresqlSpecPropertiesPglookoutCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabasePostgresqlSpecPropertiesPglookout)(ptr)
	var objs []DatabasePostgresqlSpecPropertiesPglookout
	if obj != nil {
		objs = []DatabasePostgresqlSpecPropertiesPglookout{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecPropertiesPglookout{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabasePostgresqlSpecPropertiesPglookoutCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabasePostgresqlSpecPropertiesPglookout)(ptr) = DatabasePostgresqlSpecPropertiesPglookout{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabasePostgresqlSpecPropertiesPglookout

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecPropertiesPglookout{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabasePostgresqlSpecPropertiesPglookout)(ptr) = objs[0]
			} else {
				*(*DatabasePostgresqlSpecPropertiesPglookout)(ptr) = DatabasePostgresqlSpecPropertiesPglookout{}
			}
		} else {
			*(*DatabasePostgresqlSpecPropertiesPglookout)(ptr) = DatabasePostgresqlSpecPropertiesPglookout{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DatabasePostgresqlSpecPropertiesPglookout

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecPropertiesPglookout{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DatabasePostgresqlSpecPropertiesPglookout)(ptr) = obj
		} else {
			*(*DatabasePostgresqlSpecPropertiesPglookout)(ptr) = DatabasePostgresqlSpecPropertiesPglookout{}
		}
	default:
		iter.ReportError("decode DatabasePostgresqlSpecPropertiesPglookout", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DatabasePostgresqlSpecPropertiesTimescaledbCodec struct {
}

func (DatabasePostgresqlSpecPropertiesTimescaledbCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabasePostgresqlSpecPropertiesTimescaledb)(ptr) == nil
}

func (DatabasePostgresqlSpecPropertiesTimescaledbCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabasePostgresqlSpecPropertiesTimescaledb)(ptr)
	var objs []DatabasePostgresqlSpecPropertiesTimescaledb
	if obj != nil {
		objs = []DatabasePostgresqlSpecPropertiesTimescaledb{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecPropertiesTimescaledb{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabasePostgresqlSpecPropertiesTimescaledbCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabasePostgresqlSpecPropertiesTimescaledb)(ptr) = DatabasePostgresqlSpecPropertiesTimescaledb{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabasePostgresqlSpecPropertiesTimescaledb

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecPropertiesTimescaledb{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabasePostgresqlSpecPropertiesTimescaledb)(ptr) = objs[0]
			} else {
				*(*DatabasePostgresqlSpecPropertiesTimescaledb)(ptr) = DatabasePostgresqlSpecPropertiesTimescaledb{}
			}
		} else {
			*(*DatabasePostgresqlSpecPropertiesTimescaledb)(ptr) = DatabasePostgresqlSpecPropertiesTimescaledb{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DatabasePostgresqlSpecPropertiesTimescaledb

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabasePostgresqlSpecPropertiesTimescaledb{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DatabasePostgresqlSpecPropertiesTimescaledb)(ptr) = obj
		} else {
			*(*DatabasePostgresqlSpecPropertiesTimescaledb)(ptr) = DatabasePostgresqlSpecPropertiesTimescaledb{}
		}
	default:
		iter.ReportError("decode DatabasePostgresqlSpecPropertiesTimescaledb", "unexpected JSON type")
	}
}
