/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Storage struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageSpec   `json:"spec,omitempty"`
	Status            StorageStatus `json:"status,omitempty"`
}

type StorageSpecBucket struct {
	// The name of the bucket
	Name *string `json:"name" tf:"name"`
}

type StorageSpec struct {
	State *StorageSpecResource `json:"state,omitempty" tf:"-"`

	Resource StorageSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type StorageSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The access key used to identify user
	AccessKey *string `json:"accessKey" tf:"access_key"`
	// +optional
	Bucket []StorageSpecBucket `json:"bucket,omitempty" tf:"bucket"`
	// +optional
	Created *string `json:"created,omitempty" tf:"created"`
	// The description of the object storage instance to be created
	Description *string `json:"description" tf:"description"`
	// The name of the object storage instance to be created
	Name *string `json:"name" tf:"name"`
	// The secret key used to authenticate user
	SecretKey *string `json:"secretKey" tf:"secret_key"`
	// The size of the object storage instance in gigabytes
	Size *int64 `json:"size" tf:"size"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	Url *string `json:"url,omitempty" tf:"url"`
	// +optional
	UsedSpace *int64 `json:"usedSpace,omitempty" tf:"used_space"`
	// The zone in which the object storage instance will be created
	Zone *string `json:"zone" tf:"zone"`
}

type StorageStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// StorageList is a list of Storages
type StorageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Storage CRD objects
	Items []Storage `json:"items,omitempty"`
}
